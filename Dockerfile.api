# Build stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy csproj files and restore dependencies
COPY ["src/RemoteC.Api/RemoteC.Api.csproj", "src/RemoteC.Api/"]
COPY ["src/RemoteC.Data/RemoteC.Data.csproj", "src/RemoteC.Data/"]
COPY ["src/RemoteC.Shared/RemoteC.Shared.csproj", "src/RemoteC.Shared/"]
COPY ["RemoteC.sln", "./"]

RUN dotnet restore "src/RemoteC.Api/RemoteC.Api.csproj"

# Copy source code and build
COPY . .
WORKDIR "/src/src/RemoteC.Api"
RUN dotnet build "RemoteC.Api.csproj" -c Release -o /app/build

# Publish stage
FROM build AS publish
RUN dotnet publish "RemoteC.Api.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Runtime stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS final
WORKDIR /app

# Install curl for health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -g 1000 appuser && \
    useradd -r -u 1000 -g appuser appuser && \
    chown -R appuser:appuser /app

USER appuser

# Copy published files
COPY --from=publish /app/publish .

# Expose ports
EXPOSE 8080
EXPOSE 8081

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Set environment variables
ENV ASPNETCORE_URLS="http://+:8080;https://+:8081"
ENV ASPNETCORE_ENVIRONMENT="Production"

ENTRYPOINT ["dotnet", "RemoteC.Api.dll"]